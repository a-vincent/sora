#! /bin/sh

SORA_VERSION="pre-0.1"

rel_source_files="\
	main.c \
	ads-b/plane.c ads-b/plane-iq.c \
	ads-b/planes-main-loop.c \
	common/frequency.c \
	radio/radio.c radio/fcdhid.c radio/radio-file.c \
	scan/scan-main-loop.c \
	util/array.c util/bitvector.c util/debug.c util/exception.c \
	util/graph.c util/hash.c util/list.c util/memory.c util/message.c \
	util/pool.c util/queue.c util/simple-math.c util/string.c util/timer.c"

POSSIBLE_HEADERS_DIRS="/usr/local/include /usr/pkg/include /sw/include /opt/gnu/include"
POSSIBLE_LIBS_DIRS="/usr/local/lib /usr/pkg/lib /sw/lib /opt/gnu/lib"

enable_gtk=YES			# enable GTK by default
enable_alsa=YES			# enable ALSA by default

MAKEFILE_NAME=Makefile

temp_dir=${TMPDIR:-/tmp}/sora-conf.$$
test_source=${temp_dir}/try.c
test_exec=${temp_dir}/try

original_options="$*"

while [ $# -ne 0 ]; do
	case x"$1" in
	x--enable-alsa)
		enable_alsa=YES;;
	x--disable-alsa)
		enable_alsa=NO;;
	x--enable-debug)
		enable_debug=YES;;
	x--disable-debug)
		enable_debug=NO;;
	x--enable-gtk)
		enable_gtk=YES;;
	x--disable-gtk)
		enable_gtk=NO;;
	*)
		echo "Unrecognized option $1"
		exit 1;;
	esac
	shift
done

trap "rm -rf ${temp_dir}" 0 2 15

if mkdir ${temp_dir}; then :; else
	echo "can't get temporary space in ${temp_dir}"
	exit 1
fi

cflags="-g"
cppflags="-DSORA_VERSION='\"${SORA_VERSION}\"'"
cppflags="${cppflags} -D_XOPEN_SOURCE=500 -I\${srcdir} -I."
if test x${enable_debug} = xYES; then
	cppflags="${cppflags} -DDEBUG"
fi

# need_program var prog ...
need_program() {
	printf 'Checking for %s... ' "$1"
	check_program $*

	eval need_program__result=\$$1
	case x"${need_program__result}" in
	x)
		echo not found. FATAL
		exit 1
		;;
	*)
		echo ${need_program__result}
		;;
	esac
}

# check_program var prog ...
check_program() {
	progvar="$1"
	shift
	check_program__prog=""

	while [ $# -gt 0 ]; do
	    type $1 >/dev/null 2>&1 && check_program__prog=`type $1` && break
	    shift
	done

	eval $progvar=$1
}

# check_depends
check_depends() {
	printf 'Checking which flags to use for dependencies...'
	if ${cc} -V 2>&1 | grep " Sun " >/dev/null; then
		depend_flags=-xM1
	elif ${cc} -v 2>&1 | grep gcc > /dev/null; then
		depend_flags=-MM
	else
		depend_flags=Unavailable
	fi

	echo " ${depend_flags}"
}

# test_preprocessor additional_cppflags
test_preprocessor() {
	if ${cc} -E - $cppflags $* < $test_source > /dev/null 2>&1; then
		return 0
	else
		return 1
	fi
}

# test_compile additional_cflags
test_compile() {
	if ${cc} ${cppflags} -o ${test_exec} $* $test_source > /dev/null 2>&1;
	then
		return 0
	else
		return 1
	fi
}

# test_linker additional_ldflags
test_linker() {
	if ${cc} ${cppflags} -o ${test_exec} $test_source $* > /dev/null 2>&1;
	then
		return 0
	else
		return 1
	fi
}

# check_for_header header.h
check_for_header() {
	printf 'Checking for <%s>... ' $1
	cat > $test_source <<EOF
#include <stdio.h>
#include <$1>
EOF
	if test_preprocessor; then
		echo found
		return 0
	fi
	for d in $POSSIBLE_HEADERS_DIRS; do
		if test_preprocessor -I$d; then
			echo found in $d.
			cppflags="$cppflags -I$d"
			return 0
		fi
	done

	echo not found.
	return 1
}

# check_for_func func additional_ldflags
check_for_func() {
	func=$1
	shift
	printf 'Checking for %s with %s... ' $func "$*"
	cat > $test_source <<EOF
int main() { $func(); return 0; }
EOF
	if test_linker $*; then
		ldflags="$ldflags $*"
		echo found
		return 0
	fi
	for d in $POSSIBLE_LIBS_DIRS; do
		if test_linker -L$d $*; then
			echo found in $d.
			ldflags="$ldflags -L$d $*"
			return 0
		fi
	done

	echo not found.
	return 1
}

# check_for_getrusage
check_for_getrusage() {
    if check_for_header sys/resource.h; then
	printf 'Checking for getrusage()... '
	cat > ${test_source} <<EOF
#include <sys/resource.h>

int main(void) {
    struct rusage rusage;
    getrusage(RUSAGE_SELF, &rusage);
    return 0;
}
EOF
	if test_compile; then
	    cppflags="$cppflags -DHAVE_GETRUSAGE"
	    echo yes
	else
	    echo no
	fi
    fi
}

printf 'Checking where distribution is... '

for srcdir in src ../src ../../src ../../../src ; do
	test -f ${srcdir}/ui/gtk-ui.c && break
done

if [ ! -f ${srcdir}/ui/gtk-ui.c ]; then
	echo >&2 $0: "can't find distribution. FATAL"
	exit 1
fi

echo found in ${srcdir}

if [ ${srcdir} = src ]; then
	echo WARNING: you should consider building from a subdirectory
fi

printf 'Checking whether make is GNU make... '
if (make -v -f very-UnlikeLy-name | grep GNU) >/dev/null 2>&1; then
	make_is_gnu_make=yes;
	MAKEFILE_NAME=GNUmakefile;
else
	make_is_gnu_make=no;
fi
echo ${make_is_gnu_make}

cat >${MAKEFILE_NAME} <<EOF
# This file was automatically generated by the following command:
# $0 ${original_options}

EOF

need_program cc gcc cc
cc="${cc} -std=c99"
cclink='${CC}'
check_program cxx g++ c++
check_depends

if [ x${enable_gtk} = xYES ]; then

	printf 'Checking for GTK 2.x... '

	if pkg-config gtk+-2.0; then
		echo yes
		cppflags="${cppflags} -DUSE_GTK_UI"
		cppflags="${cppflags} `pkg-config --cflags gtk+-2.0`"
		ldflags="${ldflags} `pkg-config --libs gtk+-2.0`"
		rel_source_files="${rel_source_files} ui/gtk-ui.c"
		rel_source_files="${rel_source_files} ui/widget-fft.c"
	else
		echo no. FATAL
		exit 1
	fi

fi		# end of enable_gtk = YES

if [ x${enable_alsa} = xYES ]; then

	printf 'Checking for ALSA... '

	if pkg-config alsa; then
		cppflags="${cppflags} -DUSE_ALSA"
		cppflags="${cppflags} `pkg-config --cflags alsa`"
		ldflags="${ldflags} `pkg-config --libs alsa`"
		rel_source_files="${rel_source_files} radio/radio-audio.c"
		have_alsa=yes
	else
		have_alsa=no
	fi

	echo $have_alsa
fi		# end of enable_alsa = YES

printf 'Checking for FFTw3... '
if pkg-config fftw3; then
	echo yes
	cppflags="${cppflags} `pkg-config --cflags fftw3`"
	ldflags="${ldflags} `pkg-config --libs fftw3`"
else
	echo no. FATAL
	exit 1
fi

printf 'Checking for libhackrf... '
if pkg-config libhackrf; then
	have_libhackrf=yes
	cppflags="${cppflags} -DHAVE_LIBHACKRF `pkg-config --cflags libhackrf`"
	ldflags="${ldflags} `pkg-config --libs libhackrf`"
	rel_source_files="${rel_source_files} radio/hackrf.c util/async-buffer.c"
else
	have_libhackrf=no
fi

echo $have_libhackrf

printf 'Checking for librtlsdr... '
if pkg-config librtlsdr; then
	have_librtlsdr=yes
	cppflags="${cppflags} -DHAVE_LIBRTLSDR `pkg-config --cflags librtlsdr`"
	ldflags="${ldflags} `pkg-config --libs librtlsdr`"
	rel_source_files="${rel_source_files} radio/rtlsdr.c"
else
	have_librtlsdr=no
fi

echo $have_librtlsdr

printf 'Checking for libxtrx... '
if pkg-config libxtrx; then
	have_libxtrx=yes
	cppflags="${cppflags} -pthread -DHAVE_LIBXTRX `pkg-config --cflags libxtrx`"
	ldflags="${ldflags} -pthread `pkg-config --libs libxtrx`"
	rel_source_files="${rel_source_files} radio/xtrx.c"
else
	have_libxtrx=no
fi

echo $have_libxtrx

printf 'Checking for uhd... '
if pkg-config uhd && ! test -z "$cxx"; then
	have_uhd=yes
	cppflags="${cppflags} -DHAVE_UHD `pkg-config --cflags uhd`"
	ldflags="${ldflags} `pkg-config --libs uhd`"
	rel_source_files="${rel_source_files} radio/uhd.c radio/uhd-wrapper.cc"
	cclink='${CXX}'
else
	have_uhd=no
fi

echo $have_uhd

check_for_getrusage

compute_names() {
	source_files="${source_files} $1"
	source="$1"
	case "$1" in
	'${srcdir}'*)
		rel_source=`echo "$1" | sed -e "s;^\\${srcdir}\/;;"`;;
	*)
		rel_source="$1"
		autogen_sources="${autogen_sources} $1";;
	esac


	directory="`echo "${rel_source}" | sed -e 's;[^/]*$;;' -e 's;/$;;'`"
	object="`echo "${rel_source}" | sed -e 's;\.c$;.o;' | sed -e 's;\.cc$;.o;'`"
	object_files="${object_files} ${object}"
	pobject="`echo "${object}" | sed -e 's;\.o$;.po;'`"
	pobject_files="${pobject_files} ${pobject}"
}

compile_rule() {
    case "${source}" in
    *.c)
	echo "
${object}: ${source}
	\${CC} -c -o ${object} \${CFLAGS} \${CPPFLAGS} ${source}
${pobject}: ${source}
	\${CC} -pg -c -o ${pobject} \${CFLAGS} \${CPPFLAGS} ${source}
"
    ;;
    *.cc)
	echo "
${object}: ${source}
	\${CXX} -c -o ${object} \${CFLAGS} \${CPPFLAGS} ${source}
${pobject}: ${source}
	\${CXX} -pg -c -o ${pobject} \${CFLAGS} \${CPPFLAGS} ${source}
"
    ;;
    esac
}

printf "Generating ${MAKEFILE_NAME} rules... "

source_files=""
object_files=""
pobject_files=""
autogen_sources=""
directories=""
dependencies=""
for source in ${rel_source_files}; do
	compute_names "\${srcdir}/${source}"
	dependencies="
`compile_rule` ${dependencies}"
	directories="${directories} ${directory}"
done

directories=`for d in ${directories}; do echo "$d"; done | sort | uniq`

if ! mkdir -p ${directories}; then
	echo couldn\'t create subdirectories. FATAL.
	exit 1
fi

master_source_files="${source_files}"

echo done

cat >>${MAKEFILE_NAME} <<EOF
srcdir=		${srcdir}
CPPFLAGS=	${cppflags}

CFLAGS=		${cflags}
#CFLAGS+=	-W -Wall -Wno-unused
#CFLAGS+=	-Werror

LDFLAGS=	${ldflags} -lm
#LDFLAGS+=	-L/usr/pkg/lib -lefence		# for maintainer

CC=		${cc}
CXX=		${cxx}

SRCS=		${source_files}
MASTER_SRCS=	${master_source_files}
OBJS=		${object_files}
POBJS=		${pobject_files}

CLEANFILES=	${clean_files} \${OBJS} \${POBJS}
CLEANDIRFILES=	.depend sora sora-prof gmon.out sora.core sora-prof.core

all: sora

sora: \${OBJS}
	${cclink} -o sora \${OBJS} \${LDFLAGS}

sora-prof: \${POBJS}
	${cclink} -pg -o sora-prof \${POBJS} \${LDFLAGS}

tags: \${MASTER_SRCS}
	ctags \${MASTER_SRCS}

TAGS: \${MASTER_SRCS}
	etags \${MASTER_SRCS}

.PHONY: depend
depend: .depend
EOF

case x"${depend_flags}" in
x-*)
	cat >>${MAKEFILE_NAME} <<EOF
.depend: ${autogen_sources}
	\$(CC) ${depend_flags} \${CPPFLAGS} \${SRCS} | \
		sed -e 's/^\(.*\)\.o:/.depend \1.o \1.po:/'  >.depend
EOF
	;;
*)
	cat >>${MAKEFILE_NAME} <<EOF
.depend: ${autogen_sources}
	echo 'WARNING! No dependencies tracked.'
	touch .depend
EOF
	;;
esac

cat >>${MAKEFILE_NAME} <<EOF
.PHONY: lint
lint: \${SRCS}
	lint -chapbxzF \${CPPFLAGS} \${SRCS}

.PHONY: clean
clean:
	-rm -f \${CLEANFILES}

.PHONY: cleandir
cleandir: clean
	-rm -f \${CLEANDIRFILES}

${dependencies}
EOF

if [ ${make_is_gnu_make} = yes ]; then
	cat >>${MAKEFILE_NAME} <<EOF

-include .depend
EOF
fi

echo Configuration done.
